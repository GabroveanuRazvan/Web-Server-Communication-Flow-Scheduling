{"$message_type":"diagnostic","message":"cannot borrow `stream` as mutable more than once at a time","code":{"code":"E0499","explanation":"A variable was borrowed as mutable more than once.\n\nErroneous code example:\n\n```compile_fail,E0499\nlet mut i = 0;\nlet mut x = &mut i;\nlet mut a = &mut i;\nx;\n// error: cannot borrow `i` as mutable more than once at a time\n```\n\nPlease note that in Rust, you can either have many immutable references, or one\nmutable reference. For more details you may want to read the\n[References & Borrowing][references-and-borrowing] section of the Book.\n\n[references-and-borrowing]: https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n\nExample:\n\n```\nlet mut i = 0;\nlet mut x = &mut i; // ok!\n\n// or:\nlet mut i = 0;\nlet a = &i; // ok!\nlet b = &i; // still ok!\nlet c = &i; // still ok!\nb;\na;\n```\n"},"level":"error","spans":[{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":4942,"byte_end":4944,"line_start":156,"line_end":156,"column_start":29,"column_end":31,"is_primary":false,"text":[{"text":"            let send_func = ||{","highlight_start":29,"highlight_end":31}],"label":"first mutable borrow occurs here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":3788,"byte_end":3794,"line_start":115,"line_end":115,"column_start":30,"column_end":36,"is_primary":true,"text":[{"text":"            let bytes_read = stream.read(&mut buffer,Some(&mut sender_info),None)?;","highlight_start":30,"highlight_end":36}],"label":"second mutable borrow occurs here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":5270,"byte_end":5276,"line_start":163,"line_end":163,"column_start":23,"column_end":29,"is_primary":false,"text":[{"text":"                match stream.write(&mut response_bytes,response_size,0,2){","highlight_start":23,"highlight_end":29}],"label":"first borrow occurs due to use of `stream` in closure","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":6075,"byte_end":6094,"line_start":181,"line_end":181,"column_start":59,"column_end":78,"is_primary":false,"text":[{"text":"            let send_job = MappedFileJob::new(mapped_file,Box::new(send_func));","highlight_start":59,"highlight_end":78}],"label":"cast requires that `stream` is borrowed for `'static`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"due to object lifetime defaults, `Box<dyn FnOnce() + Send>` actually means `Box<(dyn FnOnce() + Send + 'static)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0499]\u001b[0m\u001b[0m\u001b[1m: cannot borrow `stream` as mutable more than once at a time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs:115:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let bytes_read = stream.read(&mut buffer,Some(&mut sender_info),None)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9msecond mutable borrow occurs here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let send_func = ||{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfirst mutable borrow occurs here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                match stream.write(&mut response_bytes,response_size,0,2){\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfirst borrow occurs due to use of `stream` in closure\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let send_job = MappedFileJob::new(mapped_file,Box::new(send_func));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mcast requires that `stream` is borrowed for `'static`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: due to object lifetime defaults, `Box<dyn FnOnce() + Send>` actually means `Box<(dyn FnOnce() + Send + 'static)>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot borrow `stream` as mutable more than once at a time","code":{"code":"E0499","explanation":"A variable was borrowed as mutable more than once.\n\nErroneous code example:\n\n```compile_fail,E0499\nlet mut i = 0;\nlet mut x = &mut i;\nlet mut a = &mut i;\nx;\n// error: cannot borrow `i` as mutable more than once at a time\n```\n\nPlease note that in Rust, you can either have many immutable references, or one\nmutable reference. For more details you may want to read the\n[References & Borrowing][references-and-borrowing] section of the Book.\n\n[references-and-borrowing]: https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n\nExample:\n\n```\nlet mut i = 0;\nlet mut x = &mut i; // ok!\n\n// or:\nlet mut i = 0;\nlet a = &i; // ok!\nlet b = &i; // still ok!\nlet c = &i; // still ok!\nb;\na;\n```\n"},"level":"error","spans":[{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":4942,"byte_end":4944,"line_start":156,"line_end":156,"column_start":29,"column_end":31,"is_primary":true,"text":[{"text":"            let send_func = ||{","highlight_start":29,"highlight_end":31}],"label":"`stream` was mutably borrowed here in the previous iteration of the loop","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":5270,"byte_end":5276,"line_start":163,"line_end":163,"column_start":23,"column_end":29,"is_primary":false,"text":[{"text":"                match stream.write(&mut response_bytes,response_size,0,2){","highlight_start":23,"highlight_end":29}],"label":"borrows occur due to use of `stream` in closure","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":6075,"byte_end":6094,"line_start":181,"line_end":181,"column_start":59,"column_end":78,"is_primary":false,"text":[{"text":"            let send_job = MappedFileJob::new(mapped_file,Box::new(send_func));","highlight_start":59,"highlight_end":78}],"label":"cast requires that `stream` is borrowed for `'static`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"due to object lifetime defaults, `Box<dyn FnOnce() + Send>` actually means `Box<(dyn FnOnce() + Send + 'static)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0499]\u001b[0m\u001b[0m\u001b[1m: cannot borrow `stream` as mutable more than once at a time\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs:156:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let send_func = ||{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`stream` was mutably borrowed here in the previous iteration of the loop\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                match stream.write(&mut response_bytes,response_size,0,2){\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mborrows occur due to use of `stream` in closure\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let send_job = MappedFileJob::new(mapped_file,Box::new(send_func));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mcast requires that `stream` is borrowed for `'static`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: due to object lifetime defaults, `Box<dyn FnOnce() + Send>` actually means `Box<(dyn FnOnce() + Send + 'static)>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`mapped_file` does not live long enough","code":{"code":"E0597","explanation":"This error occurs because a value was dropped while it was still borrowed.\n\nErroneous code example:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\n{\n    let y = 0;\n    x.x = Some(&y); // error: `y` does not live long enough\n}\nprintln!(\"{:?}\", x.x);\n```\n\nHere, `y` is dropped at the end of the inner scope, but it is borrowed by\n`x` until the `println`. To fix the previous example, just remove the scope\nso that `y` isn't dropped until after the println\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\n\nlet y = 0;\nx.x = Some(&y);\n\nprintln!(\"{:?}\", x.x);\n```\n"},"level":"error","spans":[{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":4987,"byte_end":4998,"line_start":157,"line_end":157,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"                let response_body_size = mapped_file.file_size();","highlight_start":42,"highlight_end":53}],"label":"borrowed value does not live long enough","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":7313,"byte_end":7314,"line_start":210,"line_end":210,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        }","highlight_start":9,"highlight_end":10}],"label":"`mapped_file` dropped here while still borrowed","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":4942,"byte_end":4944,"line_start":156,"line_end":156,"column_start":29,"column_end":31,"is_primary":false,"text":[{"text":"            let send_func = ||{","highlight_start":29,"highlight_end":31}],"label":"value captured here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":4875,"byte_end":4886,"line_start":154,"line_end":154,"column_start":17,"column_end":28,"is_primary":false,"text":[{"text":"            let mapped_file = MappedFile::new(file)?;","highlight_start":17,"highlight_end":28}],"label":"binding `mapped_file` declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":6075,"byte_end":6094,"line_start":181,"line_end":181,"column_start":59,"column_end":78,"is_primary":false,"text":[{"text":"            let send_job = MappedFileJob::new(mapped_file,Box::new(send_func));","highlight_start":59,"highlight_end":78}],"label":"cast requires that `mapped_file` is borrowed for `'static`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"due to object lifetime defaults, `Box<dyn FnOnce() + Send>` actually means `Box<(dyn FnOnce() + Send + 'static)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0597]\u001b[0m\u001b[0m\u001b[1m: `mapped_file` does not live long enough\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs:157:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mapped_file = MappedFile::new(file)?;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mbinding `mapped_file` declared here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let send_func = ||{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue captured here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let response_body_size = mapped_file.file_size();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mborrowed value does not live long enough\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let send_job = MappedFileJob::new(mapped_file,Box::new(send_func));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mcast requires that `mapped_file` is borrowed for `'static`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`mapped_file` dropped here while still borrowed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: due to object lifetime defaults, `Box<dyn FnOnce() + Send>` actually means `Box<(dyn FnOnce() + Send + 'static)>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`stream` does not live long enough","code":{"code":"E0597","explanation":"This error occurs because a value was dropped while it was still borrowed.\n\nErroneous code example:\n\n```compile_fail,E0597\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\n{\n    let y = 0;\n    x.x = Some(&y); // error: `y` does not live long enough\n}\nprintln!(\"{:?}\", x.x);\n```\n\nHere, `y` is dropped at the end of the inner scope, but it is borrowed by\n`x` until the `println`. To fix the previous example, just remove the scope\nso that `y` isn't dropped until after the println\n\n```\nstruct Foo<'a> {\n    x: Option<&'a u32>,\n}\n\nlet mut x = Foo { x: None };\n\nlet y = 0;\nx.x = Some(&y);\n\nprintln!(\"{:?}\", x.x);\n```\n"},"level":"error","spans":[{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":5270,"byte_end":5276,"line_start":163,"line_end":163,"column_start":23,"column_end":29,"is_primary":true,"text":[{"text":"                match stream.write(&mut response_bytes,response_size,0,2){","highlight_start":23,"highlight_end":29}],"label":"borrowed value does not live long enough","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":7335,"byte_end":7336,"line_start":213,"line_end":213,"column_start":5,"column_end":6,"is_primary":false,"text":[{"text":"    }","highlight_start":5,"highlight_end":6}],"label":"`stream` dropped here while still borrowed","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":4942,"byte_end":4944,"line_start":156,"line_end":156,"column_start":29,"column_end":31,"is_primary":false,"text":[{"text":"            let send_func = ||{","highlight_start":29,"highlight_end":31}],"label":"value captured here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":3482,"byte_end":3492,"line_start":105,"line_end":105,"column_start":26,"column_end":36,"is_primary":false,"text":[{"text":"    pub fn handle_client(mut stream: SctpStream) -> Result<()>{","highlight_start":26,"highlight_end":36}],"label":"binding `stream` declared here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":6075,"byte_end":6094,"line_start":181,"line_end":181,"column_start":59,"column_end":78,"is_primary":false,"text":[{"text":"            let send_job = MappedFileJob::new(mapped_file,Box::new(send_func));","highlight_start":59,"highlight_end":78}],"label":"cast requires that `stream` is borrowed for `'static`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"due to object lifetime defaults, `Box<dyn FnOnce() + Send>` actually means `Box<(dyn FnOnce() + Send + 'static)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0597]\u001b[0m\u001b[0m\u001b[1m: `stream` does not live long enough\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs:163:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn handle_client(mut stream: SctpStream) -> Result<()>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mbinding `stream` declared here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let send_func = ||{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mvalue captured here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                match stream.write(&mut response_bytes,response_size,0,2){\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mborrowed value does not live long enough\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let send_job = MappedFileJob::new(mapped_file,Box::new(send_func));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mcast requires that `stream` is borrowed for `'static`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`stream` dropped here while still borrowed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: due to object lifetime defaults, `Box<dyn FnOnce() + Send>` actually means `Box<(dyn FnOnce() + Send + 'static)>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot move out of `mapped_file` because it is borrowed","code":{"code":"E0505","explanation":"A value was moved out while it was still borrowed.\n\nErroneous code example:\n\n```compile_fail,E0505\nstruct Value {}\n\nfn borrow(val: &Value) {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    let _ref_to_val: &Value = &x;\n    eat(x);\n    borrow(_ref_to_val);\n}\n```\n\nHere, the function `eat` takes ownership of `x`. However,\n`x` cannot be moved because the borrow to `_ref_to_val`\nneeds to last till the function `borrow`.\nTo fix that you can do a few different things:\n\n* Try to avoid moving the variable.\n* Release borrow before move.\n* Implement the `Copy` trait on the type.\n\nExamples:\n\n```\nstruct Value {}\n\nfn borrow(val: &Value) {}\n\nfn eat(val: &Value) {}\n\nfn main() {\n    let x = Value{};\n\n    let ref_to_val: &Value = &x;\n    eat(&x); // pass by reference, if it's possible\n    borrow(ref_to_val);\n}\n```\n\nOr:\n\n```\nstruct Value {}\n\nfn borrow(val: &Value) {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n\n    let ref_to_val: &Value = &x;\n    borrow(ref_to_val);\n    // ref_to_val is no longer used.\n    eat(x);\n}\n```\n\nOr:\n\n```\n#[derive(Clone, Copy)] // implement Copy trait\nstruct Value {}\n\nfn borrow(val: &Value) {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    let ref_to_val: &Value = &x;\n    eat(x); // it will be copied here.\n    borrow(ref_to_val);\n}\n```\n\nFor more information on Rust's ownership system, take a look at the\n[References & Borrowing][references-and-borrowing] section of the Book.\n\n[references-and-borrowing]: https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n"},"level":"error","spans":[{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":6063,"byte_end":6074,"line_start":181,"line_end":181,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"            let send_job = MappedFileJob::new(mapped_file,Box::new(send_func));","highlight_start":47,"highlight_end":58}],"label":"move out of `mapped_file` occurs here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":4942,"byte_end":4944,"line_start":156,"line_end":156,"column_start":29,"column_end":31,"is_primary":false,"text":[{"text":"            let send_func = ||{","highlight_start":29,"highlight_end":31}],"label":"borrow of `mapped_file` occurs here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":4987,"byte_end":4998,"line_start":157,"line_end":157,"column_start":42,"column_end":53,"is_primary":false,"text":[{"text":"                let response_body_size = mapped_file.file_size();","highlight_start":42,"highlight_end":53}],"label":"borrow occurs due to use in closure","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs","byte_start":6075,"byte_end":6094,"line_start":181,"line_end":181,"column_start":59,"column_end":78,"is_primary":false,"text":[{"text":"            let send_job = MappedFileJob::new(mapped_file,Box::new(send_func));","highlight_start":59,"highlight_end":78}],"label":"cast requires that `mapped_file` is borrowed for `'static`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"due to object lifetime defaults, `Box<dyn FnOnce() + Send>` actually means `Box<(dyn FnOnce() + Send + 'static)>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0505]\u001b[0m\u001b[0m\u001b[1m: cannot move out of `mapped_file` because it is borrowed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/gabroveanu-razvan/RustroverProjects/sctp_web_server/utils/src/sctp_server.rs:181:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let send_func = ||{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mborrow of `mapped_file` occurs here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let response_body_size = mapped_file.file_size();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mborrow occurs due to use in closure\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let send_job = MappedFileJob::new(mapped_file,Box::new(send_func));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mcast requires that `mapped_file` is borrowed for `'static`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmove out of `mapped_file` occurs here\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: due to object lifetime defaults, `Box<dyn FnOnce() + Send>` actually means `Box<(dyn FnOnce() + Send + 'static)>`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 5 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 5 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0499, E0505, E0597.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0499, E0505, E0597.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0499`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0499`.\u001b[0m\n"}
